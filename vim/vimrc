syntax on
filetype indent plugin on

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
set runtimepath+=$XDG_DATA_HOME/vim
set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after
set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_STATE_HOME/vim/swap | call mkdir(&directory, 'p')
set undodir=$XDG_STATE_HOME/vim/undo | call mkdir(&undodir, 'p')
set viewdir=$XDG_STATE_HOME/vim/view | call mkdir(&viewdir, 'p')
set viminfofile=$XDG_STATE_HOME/vim/viminfo
let g:netrw_home = $XDG_DATA_HOME . "/vim"

" Plugins {{{
call plug#begin()
Plug 'pangloss/vim-javascript'
Plug 'vim-python/python-syntax'
Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-commentary'
Plug 'ap/vim-css-color'
Plug 'nvie/vim-flake8'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'
Plug 'davidhalter/jedi-vim'
Plug 'mbbill/undotree'
call plug#end()

" Plug 'mbbill/undotree' 
nnoremap <F2> :UndotreeToggle<CR>

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <leader>t :NERDTree<CR>
" nnoremap <leader>f :NERDTreeFind<CR>
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

let g:fzf_layout = { 'down': '40%', }
let g:fzf_preview_window = ['hidden', 'ctrl-/']
nnoremap <leader>b <cmd>Buffers<CR>
nnoremap <leader>f <cmd>Files %:h<CR>

" https://bitbucket.org/teramako/jscomplete-vim/src/master/
let g:jscomplete_use = ['dom', 'es6th']
autocmd FileType javascript :setlocal omnifunc=jscomplete#CompleteJS

" Plug 'vim-python/python-syntax'
let g:python_highlight_all = 1

" Plug 'vim-syntastic/syntastic'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }
" let g:syntastic_javascript_eslint_exec = '/usr/bin/eslint'
" let g:syntastic_javascript_checkers = ['eslint']

" Plug 'nvie/vim-flake8'
let g:flake8_quickfix_height = 8
autocmd FileType python map <buffer> <F8> :call flake8#Flake8()<CR>

" }}}

" Settings {{{
set omnifunc=syntaxcomplete#Complete
set completeopt=menuone,popup,noinsert
set wildmenu
set wildoptions=pum
set autowriteall
set splitbelow
set previewheight=14
set tags+=./.tags
set path+=**5
set foldmethod=marker
set statusline=%<%f\ %m%h%r%=%-8.(%y\ %l,%c,%L%)\ %P\ %#warningmsg#
set switchbuf=usetab
set nocompatible
set showcmd
set ignorecase
set smartcase
set backspace=indent,eol,start
set autoindent 
set nostartofline
set autochdir
set ruler
set laststatus=2
set t_vb=
set mouse=a
set shortmess+=I
set number
set relativenumber
set background=dark
set notimeout ttimeout ttimeoutlen=200
set pastetoggle=<F11>
set shiftwidth=4
set softtabstop=4
set expandtab
" set cursorline " slow AF
" set cursorlineopt=screenline
set undofile
set scrolloff=8
set incsearch
set hlsearch
let g:netrw_banner=0
let g:netrw_liststyle=3
"}}}

" Mappings {{{

" INSERT <tag and press Ctrl+s the result is <tag></tag>
" won't work with <tag src="example"... 
inoremap <C-s> <esc>F<yeea><esc>pa><esc>F<a/<esc>F>a
nnoremap <C-c> :silent .w !xclip -sel c<CR>
vnoremap <C-c> "cy <bar> :call system('xclip -sel c', @c)<CR>
nnoremap cn :cnext<CR>
nnoremap cp :cprevious<CR>
nnoremap <C-s-j> :m .+1<CR>==
nnoremap <C-s-k> :m .-2<CR>==
inoremap <C-s-j> <Esc>:m .+1<CR>==gi
inoremap <C-s-k> <Esc>:m .-2<CR>==gi
vnoremap <C-s-j> :m '>+1<CR>gv=gv
vnoremap <C-s-k> :m '<-2<CR>gv=gv
" nnoremap <F4> :set hlsearch! hlsearch?<CR>
nnoremap <F4> :noh<CR>
nnoremap <leader>x :!chmod +x %<CR>

" }}}

" Auto {{{
autocmd BufEnter * :syntax sync fromstart
autocmd BufWritePost */glava/* !~/.config/glava/restart
autocmd BufWritePost *tmux.conf !tmux source-file % \; display "Reloaded"
autocmd BufWritePost Xresources !xrdb load %
autocmd BufWritePost dunstrc !~/.scripts/shell/dunst/reload.sh
autocmd BufWritePost ~/.config/i3/* !i3-msg reload
autocmd BufWritePost */i3blocks/config !i3-msg restart
autocmd BufWritePost */X11/themes/* !xrdb load ~/.config/X11/Xresources
autocmd BufWritePost */alacritty/themes/*.yml !touch -m ~/.config/alacritty/*.yml
autocmd BufWritePost */polybar/config.ini !~/.config/polybar/launch
autocmd BufNewFile,BufRead *.py set colorcolumn=80
autocmd BufNewFile,BufRead .bashrc,.bash_aliases,.profile set filetype=bash
autocmd BufNewFile,BufRead lfrc set syntax=config
autocmd BufNewFile,BufRead ~/.config/i3/* set syntax=i3config
autocmd BufNewFile,BufRead ~/.config/X11/themes/* set syntax=xdefaults
autocmd CompleteDone * pclose
" autocmd BufWritePost *.cpp,*.c,*.h silent! !ctags -R -o ./.tags . &
" autocmd FileType i3config setlocal foldmethod=indent


" }}}

" Fun {{{

command! -nargs=+ -complete=file Mkdir silent execute '!mkdir -p <args>' | execute ':redraw!'
command! -nargs=+ -complete=file Grep silent execute 'grep! -rI <args>' | execute ':redraw!' | copen 12
command! -nargs=+ -complete=file RG cgetexpr system('rg --vimgrep <args>') | copen 12
nnoremap <leader>g :Grep<Space>

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

function! s:LoadTemplates()
    silent! execute '0r $XDG_CONFIG_HOME/vim/templates/skeleton.'.expand("%:e")
    for _b in range(1, bufnr('$'))
        if bufname(_b) =~ "/templates/skeleton"
            silent! execute 'bwipeout ' . _b
        endif
    endfor
endfunction
autocmd BufNewFile *.* call s:LoadTemplates()
" command! LoadTemplate call s:LoadTemplates()

function! GoBack()
    try
        execute "b#"
    catch
        execute "bn"
    endtry
endfunction
nnoremap gb :call GoBack()<CR>

set tabline=%!MyTabLine()
function! MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        " select the highlighting
        let s .= i + 1 == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
        let s .= ' %{MyTabLabel(' .. (i + 1) .. ')} '
    endfor
    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'
    return s
endfunction

function! MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let b = buflist[winnr - 1]
    let bname = bufname(b)
    " let pname = pathshorten(bname, 3)
    let basename = fnamemodify(bname, ':t')  " :t  pat htail
    let n = strlen(basename)
    " let start = strridx(pname, "/") " like stridx but returns the last ocurrence
    " let s = n > 15 ? strcharpart(pname, start) : pname 
    let s = n > 15 ? strcharpart(basename, 0, 12) . ".." : basename
    let m = getbufvar(b, "&modified") ? "[M]" : "   "
    return printf(' %d: %-15s %s', a:n, s, m)
endfunction

" }}}

" Theme {{{

colorscheme habamax
hi Normal guibg=NONE ctermbg=NONE cterm=NONE
" hi ColorColumn ctermbg=236
" hi LineNr ctermfg=7 ctermbg=NONE
" hi CursorLine cterm=NONE ctermbg=233
" hi CursorLine term=underline
" hi Visual ctermfg=1 ctermbg=233

" }}}
